<?phpif ($_SERVER["REQUEST_METHOD"] == "POST") {    $user_msg = $_POST['message'] ?? '';    $api_key = "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";    $data = [        "model" => "gpt-4o-mini",        "messages" => [            ["role" => "user", "content" => $user_msg]        ]    ];    $ch = curl_init("https://api.openai.com/v1/chat/completions");    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);    curl_setopt($ch, CURLOPT_HTTPHEADER, [        "Content-Type: application/json",        "Authorization: Bearer $api_key"    ]);    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));    $response = curl_exec($ch);    curl_close($ch);    $result = json_decode($response, true);    echo nl2br(htmlspecialchars($result['choices'][0]['message']['content'] ?? 'No response.'));    exit;}?><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <title>ChatPro AI</title>  <style>    :root {      --bg: #ffffff;      --text: #000000;      --chat-bg: #f0f0f0;      --primary: #007bff;    }    body.dark { --bg: #121212; --text: #ffffff; --chat-bg: #1e1e1e; --primary: #66b2ff; }    body.colorful { --bg: #fffaf0; --text: #333; --chat-bg: #fff3cd; --primary: #ff6600; }    * { box-sizing: border-box; }    body {      margin: 0; padding: 0;      background: var(--bg);      color: var(--text);      font-family: 'Segoe UI', sans-serif;      transition: background 0.3s, color 0.3s;    }    .chat-container {      max-width: 800px;      margin: 40px auto;      background: var(--chat-bg);      border-radius: 16px;      padding: 20px;      box-shadow: 0 0 15px rgba(0,0,0,0.1);    }    .top-bar {      display: flex;      flex-wrap: wrap;      justify-content: space-between;      align-items: center;      margin-bottom: 10px;      gap: 8px;    }    .chat-box {      max-height: 500px;      overflow-y: auto;      padding: 10px;      background: #fff;      border-radius: 12px;      margin-bottom: 15px;      display: flex;      flex-direction: column;      gap: 10px;    }    .message { display: flex; }    .user-msg {      align-self: flex-end;      background: var(--primary);      color: white;      padding: 10px 15px;      border-radius: 18px 18px 0 18px;      max-width: 75%;      white-space: pre-line;    }    .ai-msg {      align-self: flex-start;      background: #e9f2ff;      padding: 10px 15px;      border-radius: 18px 18px 18px 0;      max-width: 75%;      white-space: pre-line;    }    textarea {      width: 100%;      height: 80px;      font-size: 16px;      padding: 12px;      border-radius: 8px;      border: 1px solid #ccc;      resize: vertical;    }    button, select, label {      font-size: 15px;      padding: 10px 14px;      margin: 3px;      cursor: pointer;      border-radius: 8px;      border: none;      background: var(--primary);      color: white;    }    button:hover, label:hover { opacity: 0.9; }    .input-actions {      display: flex;      flex-wrap: wrap;      gap: 8px;      margin-top: 10px;    }  </style></head><body><div class="chat-container">  <div class="top-bar">    <strong>ü§ñ ChatPro AI</strong>    <div style="display: flex; flex-wrap: wrap; gap: 5px;">      <select id="themeSelect" onchange="switchTheme()">        <option value="">Light</option>        <option value="dark">Dark</option>        <option value="colorful">Colorful</option>      </select>      <button onclick="toggleDark()">üåô</button>      <button onclick="speakLast()">üîä</button>      <button onclick="clearChat()">üóëÔ∏è</button>    </div>  </div>  <div id="chat-box" class="chat-box"></div>  <form id="chat-form">    <textarea id="message" placeholder="Type your message..." required></textarea>    <div class="input-actions">      <button type="submit">Send</button>      <button type="button" onclick="startVoice()">üéôÔ∏è Voice</button>      <label>üñºÔ∏è Upload <input type="file" id="imgInput" accept="image/*" onchange="uploadImg()" style="display:none"></label>    </div>  </form></div><script>let lastAI = "";const chatBox = document.getElementById("chat-box");const msgField = document.getElementById("message");window.onload = () => {  chatBox.innerHTML = localStorage.getItem("chat-history") || "";  const savedTheme = localStorage.getItem("theme");  if (savedTheme) document.body.className = savedTheme;  document.getElementById("themeSelect").value = savedTheme || "";};function saveChat() {  localStorage.setItem("chat-history", chatBox.innerHTML);}function toggleDark() {  document.body.classList.toggle("dark");  localStorage.setItem("theme", document.body.className);}function switchTheme() {  const theme = document.getElementById("themeSelect").value;  document.body.className = theme;  localStorage.setItem("theme", theme);}function clearChat() {  chatBox.innerHTML = "";  localStorage.removeItem("chat-history");}function uploadImg() {  const file = document.getElementById("imgInput").files[0];  if (file) {    const reader = new FileReader();    reader.onload = () => {      const imgTag = `<img src='${reader.result}' width='200'>`;      const msg = document.createElement("div");      msg.className = "message";      msg.innerHTML = `<div class='user-msg'>üñºÔ∏è<br>${imgTag}</div>`;      chatBox.appendChild(msg);      saveChat();    };    reader.readAsDataURL(file);  }}function startVoice() {  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();  recognition.lang = 'bn-BD';  recognition.start();  recognition.onresult = (e) => { msgField.value = e.results[0][0].transcript; };}function speakText(text) {  const utter = new SpeechSynthesisUtterance(text);  utter.lang = 'bn-BD';  speechSynthesis.speak(utter);}function speakLast() {  speakText(lastAI);}function transliterateText(text, callback) {  fetch("https://inputtools.google.com/request?text=" + encodeURIComponent(text) + "&itc=bn-t-i0-und&num=1")    .then(res => res.json())    .then(data => {      if (data[0] === "SUCCESS") callback(data[1][0][1][0]);      else callback(text);    })    .catch(() => callback(text));}document.getElementById("chat-form").addEventListener("submit", function(e) {  e.preventDefault();  const userInput = msgField.value.trim();  if (!userInput) return;  const userMsg = document.createElement("div");  userMsg.className = "message";  userMsg.innerHTML = `<div class="user-msg">${userInput}</div>`;  chatBox.appendChild(userMsg);  const aiMsg = document.createElement("div");  aiMsg.className = "message";  aiMsg.innerHTML = `<div class="ai-msg">‚è≥...</div>`;  chatBox.appendChild(aiMsg);  chatBox.scrollTop = chatBox.scrollHeight;  msgField.value = "";  transliterateText(userInput, (translated) => {    fetch("", {      method: "POST",      headers: { "Content-Type": "application/x-www-form-urlencoded" },      body: "message=" + encodeURIComponent(translated)    })    .then(res => res.text())    .then(data => {      aiMsg.querySelector(".ai-msg").innerHTML = data;      lastAI = data;      chatBox.scrollTop = chatBox.scrollHeight;      saveChat();      speakText(data);    })    .catch(err => {      aiMsg.querySelector(".ai-msg").innerHTML = "‚ùå Error: " + err;    });  });});</script></body></html>